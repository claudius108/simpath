start
  = LocationPath

//2 Location Paths
LocationPath 
 = RelativeLocationPath
 / AbsoluteLocationPath

AbsoluteLocationPath
 = '/' RelativeLocationPath?
 / AbbreviatedAbsoluteLocationPath

RelativeLocationPath
 =  Step:Step (("/" / "//") Step:Step)* {alert( Step );}

//2.1 Location Steps
Step
 = AxisSpecifier NodeTest Predicate*
 / AbbreviatedStep

AxisSpecifier
 = AxisName '::'
 / AbbreviatedAxisSpecifier

//2.2 Axes
AxisName
 = 'ancestor'
 / 'ancestor-or-self'
 / 'attribute'
 / 'child'
 / 'descendant'
 / 'descendant-or-self'
 / 'following'
 / 'following-sibling'
 / 'namespace'
 / 'parent'
 / 'preceding'
 / 'preceding-sibling'
 / 'self'

NodeTest
 = NameTest
 / NodeType '(' ')'
 // 'processing-instruction' '(' Literal ')'

//2.4 Predicates
Predicate
 = '[' PredicateExpr ']'

PredicateExpr
 = Expr

//2.5 Abbreviated Syntax
AbbreviatedAbsoluteLocationPath
 = '//' RelativeLocationPath

AbbreviatedRelativeLocationPath
 = RelativeLocationPath '//' Step

AbbreviatedStep
 = '.'
 / '..'

AbbreviatedAxisSpecifier
 = '@'?

// 3 Expressions
//3.1 Basics
Expr
 = OrExpr

PrimaryExpr
 = //VariableReference
 '(' Expr ')'
 / Literal
 / Number
 / FunctionCall

//3.2 Function Calls
FunctionCall
 = FunctionName '(' ( Argument ( ',' Argument )* )? ')'

Argument
 = Expr

//3.3 Node-sets
UnionExpr
 = PathExpr ('|' PathExpr)*

PathExpr
 = LocationPath
 / FilterExpr
 / FilterExpr '/' RelativeLocationPath
 / FilterExpr '//' RelativeLocationPath

FilterExpr
 = PrimaryExpr Predicate* 

//3.4 Booleans
OrExpr = AndExpr ('or' AndExpr)*

AndExpr
 = EqualityExpr ('and' EqualityExpr)*

EqualityExpr
 = RelationalExpr (("=" / "!") RelationalExpr)*

RelationalExpr
 = AdditiveExpr (("<" / ">" / "<=" / ">=") AdditiveExpr)*

//3.5 Numbers
AdditiveExpr
 = MultiplicativeExpr (("+" / "-") MultiplicativeExpr)*

MultiplicativeExpr
 = UnaryExpr ((MultiplyOperator / "div" / "mod") UnaryExpr)*

UnaryExpr
 = UnionExpr
 / '-' UnaryExpr

//3.7 Lexical Structure
ExprToken
 = '(' / ')' / '[' / ']' / '.' / '..' / '@' / ',' / '::'
 / NameTest
 / NodeType
 / Operator _
 / FunctionName
 / AxisName
 / Literal _
 / Number

// VariableReference
Literal
 = '"' [^"]* '"'
 / "'" [^']* "'"

Number
 = Digits ('.' Digits?)?
 / '.' Digits

Digits
 = [0-9]+

Operator
 = OperatorName
 / MultiplyOperator
 / '/' / '//' / '|' / '+' / '-' / '=' / '!=' / '<' / '<=' / '>' /
'>='

OperatorName
 = 'and' / 'or' / 'mod' / 'div'

MultiplyOperator
 = '*'

//FunctionName
// = QName NodeType

//VariableReference
// = '$' QName */

NameTest
 = '*'
 // NCName ':' '*'
 / QName

QName
 = Name

NameStartChar
 = ":" / [A-Z] / "_" / [a-z] / [u00C0-u00D6] / [u00D8-u00F6] /
[u00F8-u02FF] / [u0370-u037D] / [u037F-u1FFF] / [u200C-u200D] /
[u2070-u218F] / [u2C00-u2FEF] / [u3001-uD7FF] / [uF900-uFDCF] /
[uFDF0-uFFFD] / [u10000-uEFFFF]

NameChar
 = NameStartChar / "-" / "." / [0-9] / [u00B7] / [u0300-u036F] /
[u203F-u2040]

Name
 = NameStartChar (NameChar)*

NodeType
 = 'comment'
 / 'text'
 // 'processing-instruction'
 / 'node'

//4 Core Function Library (XPATH1)
FunctionName
 = XPath1CoreFunctions
 / XFormsFunctionsChangeContext
 / XFormsFunctions

XPath1CoreFunctions
 = NodeSetFunctions
 / StringFunctions
 / BooleanFunctions
 / NumberFunctions

//4.1 Node Set Functions
NodeSetFunctions
 = "last"
 /"position"
 /"count"
 /"id"
 /"local-name"
 /"namespace-uri"
 /"name"

//4.2 String Functions
StringFunctions
 = "string"
 /"concat"
 /"starts-with"
 /"contains"
 /"substring-before"
 /"substring-after"
 /"substring"
 /"string-length"
 /"normalize-space"
 /"translate"

//4.3 Boolean Functions
BooleanFunctions
 = "boolean"
 /"not"
 /"true"
 /"false"
 /"lang"

//4.4 Number Functions
NumberFunctions
 = "number"
 /"sum"
 /"floor"
 /"ceiling"
 /"round"

//5 XForms Core Functions

 XFormsFunctionsChangeContext
 ="instances"

 XFormsFunctions
 ="avg"
 /"boolean-from-string"
 /"count-non-empty"
 /"days-from-date"
 /"if"
 /"index"
 /"max"
 /"min"
 /"months"
 /"now"
 /"property"
 /"seconds"
 /"seconds-from-dateTime"

//Common Syntactic Constructs
 _ =[ \t\n\r]+

instance = "instance" "('" instanceID:instanceID "')"  {kF.simPath.xformsFunctions.instance(instanceID)}
instanceID = [a-zA-Z]*