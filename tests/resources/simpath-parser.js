$x2._parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "AbbrevForwardStep": parse_AbbrevForwardStep,
        "AbbrevReverseStep": parse_AbbrevReverseStep,
        "AdditiveExpr": parse_AdditiveExpr,
        "AndExpr": parse_AndExpr,
        "AnyKindTest": parse_AnyKindTest,
        "AttribNameOrWildcard": parse_AttribNameOrWildcard,
        "AttributeTest": parse_AttributeTest,
        "AxisStep": parse_AxisStep,
        "CastExpr": parse_CastExpr,
        "CastableExpr": parse_CastableExpr,
        "CommentTest": parse_CommentTest,
        "ComparisonExpr": parse_ComparisonExpr,
        "ContextItemExpr": parse_ContextItemExpr,
        "DecimalLiteral": parse_DecimalLiteral,
        "Digits": parse_Digits,
        "DocumentTest": parse_DocumentTest,
        "DoubleLiteral": parse_DoubleLiteral,
        "DoubleSlash": parse_DoubleSlash,
        "ElementNameOrWildcard": parse_ElementNameOrWildcard,
        "ElementTest": parse_ElementTest,
        "EngineFunctionCall": parse_EngineFunctionCall,
        "Expr": parse_Expr,
        "ExprSingle": parse_ExprSingle,
        "FilterExpr": parse_FilterExpr,
        "ForExpr": parse_ForExpr,
        "ForwardAxis": parse_ForwardAxis,
        "ForwardStep": parse_ForwardStep,
        "FunctionCall": parse_FunctionCall,
        "FunctionName": parse_FunctionName,
        "FurtherStepExpr": parse_FurtherStepExpr,
        "GeneralComp": parse_GeneralComp,
        "IfExpr": parse_IfExpr,
        "InstanceofExpr": parse_InstanceofExpr,
        "IntersectExceptExpr": parse_IntersectExceptExpr,
        "ItemType": parse_ItemType,
        "KindTest": parse_KindTest,
        "LeadingSingleSlash": parse_LeadingSingleSlash,
        "Literal": parse_Literal,
        "MultiplicativeExpr": parse_MultiplicativeExpr,
        "NCName": parse_NCName,
        "NameChar": parse_NameChar,
        "NameStartChar": parse_NameStartChar,
        "NameTest": parse_NameTest,
        "NodeComp": parse_NodeComp,
        "NodeTest": parse_NodeTest,
        "NumericLiteral": parse_NumericLiteral,
        "OccurrenceIndicator": parse_OccurrenceIndicator,
        "OrExpr": parse_OrExpr,
        "PITest": parse_PITest,
        "ParenthesizedExpr": parse_ParenthesizedExpr,
        "PathExpr": parse_PathExpr,
        "Predicate": parse_Predicate,
        "PredicateList": parse_PredicateList,
        "PrefixedName": parse_PrefixedName,
        "PrimaryExpr": parse_PrimaryExpr,
        "QName": parse_QName,
        "QuantifiedExpr": parse_QuantifiedExpr,
        "RangeExpr": parse_RangeExpr,
        "RelativePathExpr": parse_RelativePathExpr,
        "ReverseAxis": parse_ReverseAxis,
        "ReverseStep": parse_ReverseStep,
        "SchemaAttributeTest": parse_SchemaAttributeTest,
        "SchemaElementTest": parse_SchemaElementTest,
        "SequenceType": parse_SequenceType,
        "SimpleForClause": parse_SimpleForClause,
        "SingleSlash": parse_SingleSlash,
        "SingleType": parse_SingleType,
        "StepExpr": parse_StepExpr,
        "StringLiteral": parse_StringLiteral,
        "TextTest": parse_TextTest,
        "TreatExpr": parse_TreatExpr,
        "UnaryExpr": parse_UnaryExpr,
        "UnionExpr": parse_UnionExpr,
        "ValueComp": parse_ValueComp,
        "ValueExpr": parse_ValueExpr,
        "VarRef": parse_VarRef,
        "Wildcard": parse_Wildcard,
        "XPath": parse_XPath
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "XPath";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_XPath() {
        var cacheKey = 'XPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_Expr();
        var result2 = result1 !== null
          ? (function(expr) {return expr;})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Expr() {
        var cacheKey = 'Expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ExprSingle();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ",") {
            var result6 = ",";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_ExprSingle();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_ExprSingle();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(exprSingle) {return exprSingle;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprSingle() {
        var cacheKey = 'ExprSingle@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_ForExpr();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_QuantifiedExpr();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_IfExpr();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse_OrExpr();
              var result3 = result2 !== null
                ? (function(OrExpr) { return OrExpr;})(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ForExpr() {
        var cacheKey = 'ForExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_SimpleForClause();
        if (result1 !== null) {
          if (input.substr(pos, 6) === "return") {
            var result2 = "return";
            pos += 6;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"return\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_ExprSingle();
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SimpleForClause() {
        var cacheKey = 'SimpleForClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "for") {
          var result1 = "for";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"for\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "$") {
            var result2 = "$";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_QName();
            if (result3 !== null) {
              if (input.substr(pos, 2) === "in") {
                var result4 = "in";
                pos += 2;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"in\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_ExprSingle();
                if (result5 !== null) {
                  var result6 = [];
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result8 = ",";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "$") {
                      var result9 = "$";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"$\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_QName();
                      if (result10 !== null) {
                        if (input.substr(pos, 2) === "in") {
                          var result11 = "in";
                          pos += 2;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"in\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse_ExprSingle();
                          if (result12 !== null) {
                            var result7 = [result8, result9, result10, result11, result12];
                          } else {
                            var result7 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result7 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result7 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result7 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                  while (result7 !== null) {
                    result6.push(result7);
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === ",") {
                      var result8 = ",";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "$") {
                        var result9 = "$";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"$\"");
                        }
                      }
                      if (result9 !== null) {
                        var result10 = parse_QName();
                        if (result10 !== null) {
                          if (input.substr(pos, 2) === "in") {
                            var result11 = "in";
                            pos += 2;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"in\"");
                            }
                          }
                          if (result11 !== null) {
                            var result12 = parse_ExprSingle();
                            if (result12 !== null) {
                              var result7 = [result8, result9, result10, result11, result12];
                            } else {
                              var result7 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result7 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result7 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result7 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result7 = null;
                      pos = savedPos1;
                    }
                  }
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuantifiedExpr() {
        var cacheKey = 'QuantifiedExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "some") {
          var result16 = "some";
          pos += 4;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"some\"");
          }
        }
        if (result16 !== null) {
          var result1 = result16;
        } else {
          if (input.substr(pos, 5) === "every") {
            var result15 = "every";
            pos += 5;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"every\"");
            }
          }
          if (result15 !== null) {
            var result1 = result15;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "$") {
            var result2 = "$";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_QName();
            if (result3 !== null) {
              if (input.substr(pos, 2) === "in") {
                var result4 = "in";
                pos += 2;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"in\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_ExprSingle();
                if (result5 !== null) {
                  var result6 = [];
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result10 = ",";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === "$") {
                      var result11 = "$";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"$\"");
                      }
                    }
                    if (result11 !== null) {
                      var result12 = parse_QName();
                      if (result12 !== null) {
                        if (input.substr(pos, 2) === "in") {
                          var result13 = "in";
                          pos += 2;
                        } else {
                          var result13 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"in\"");
                          }
                        }
                        if (result13 !== null) {
                          var result14 = parse_ExprSingle();
                          if (result14 !== null) {
                            var result9 = [result10, result11, result12, result13, result14];
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                  while (result9 !== null) {
                    result6.push(result9);
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === ",") {
                      var result10 = ",";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result10 !== null) {
                      if (input.substr(pos, 1) === "$") {
                        var result11 = "$";
                        pos += 1;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"$\"");
                        }
                      }
                      if (result11 !== null) {
                        var result12 = parse_QName();
                        if (result12 !== null) {
                          if (input.substr(pos, 2) === "in") {
                            var result13 = "in";
                            pos += 2;
                          } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"in\"");
                            }
                          }
                          if (result13 !== null) {
                            var result14 = parse_ExprSingle();
                            if (result14 !== null) {
                              var result9 = [result10, result11, result12, result13, result14];
                            } else {
                              var result9 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos, 9) === "satisfies") {
                      var result7 = "satisfies";
                      pos += 9;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"satisfies\"");
                      }
                    }
                    if (result7 !== null) {
                      var result8 = parse_ExprSingle();
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IfExpr() {
        var cacheKey = 'IfExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "if") {
          var result1 = "if";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_Expr();
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos, 4) === "then") {
                  var result5 = "then";
                  pos += 4;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"then\"");
                  }
                }
                if (result5 !== null) {
                  var result6 = parse_ExprSingle();
                  if (result6 !== null) {
                    if (input.substr(pos, 4) === "else") {
                      var result7 = "else";
                      pos += 4;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"else\"");
                      }
                    }
                    if (result7 !== null) {
                      var result8 = parse_ExprSingle();
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrExpr() {
        var cacheKey = 'OrExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AndExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 2) === "or") {
            var result6 = "or";
            pos += 2;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"or\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_AndExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 2) === "or") {
              var result6 = "or";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"or\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_AndExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(AndExpr) {return AndExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AndExpr() {
        var cacheKey = 'AndExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ComparisonExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 3) === "and") {
            var result6 = "and";
            pos += 3;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"and\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_ComparisonExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 3) === "and") {
              var result6 = "and";
              pos += 3;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"and\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_ComparisonExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ComparisonExpr) {return ComparisonExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ComparisonExpr() {
        var cacheKey = 'ComparisonExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_RangeExpr();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result10 = parse_ValueComp();
          if (result10 !== null) {
            var result6 = result10;
          } else {
            var result9 = parse_GeneralComp();
            if (result9 !== null) {
              var result6 = result9;
            } else {
              var result8 = parse_NodeComp();
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;;
              };
            };
          }
          if (result6 !== null) {
            var result7 = parse_RangeExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(RangeExpr) {return RangeExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RangeExpr() {
        var cacheKey = 'RangeExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AdditiveExpr();
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 2) === "to") {
            var result6 = "to";
            pos += 2;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"to\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_AdditiveExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(AdditiveExpr) {return AdditiveExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveExpr() {
        var cacheKey = 'AdditiveExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_MultiplicativeExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "+") {
            var result9 = "+";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result9 !== null) {
            var result6 = result9;
          } else {
            if (input.substr(pos, 1) === "-") {
              var result8 = "-";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;;
            };
          }
          if (result6 !== null) {
            var result7 = parse_MultiplicativeExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "+") {
              var result9 = "+";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result9 !== null) {
              var result6 = result9;
            } else {
              if (input.substr(pos, 1) === "-") {
                var result8 = "-";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;;
              };
            }
            if (result6 !== null) {
              var result7 = parse_MultiplicativeExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(MultiplicativeExpr) {return MultiplicativeExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeExpr() {
        var cacheKey = 'MultiplicativeExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_UnionExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "*") {
            var result11 = "*";
            pos += 1;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result11 !== null) {
            var result6 = result11;
          } else {
            if (input.substr(pos, 3) === "div") {
              var result10 = "div";
              pos += 3;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"div\"");
              }
            }
            if (result10 !== null) {
              var result6 = result10;
            } else {
              if (input.substr(pos, 4) === "idiv") {
                var result9 = "idiv";
                pos += 4;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"idiv\"");
                }
              }
              if (result9 !== null) {
                var result6 = result9;
              } else {
                if (input.substr(pos, 3) === "mod") {
                  var result8 = "mod";
                  pos += 3;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"mod\"");
                  }
                }
                if (result8 !== null) {
                  var result6 = result8;
                } else {
                  var result6 = null;;
                };
              };
            };
          }
          if (result6 !== null) {
            var result7 = parse_UnionExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "*") {
              var result11 = "*";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result11 !== null) {
              var result6 = result11;
            } else {
              if (input.substr(pos, 3) === "div") {
                var result10 = "div";
                pos += 3;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"div\"");
                }
              }
              if (result10 !== null) {
                var result6 = result10;
              } else {
                if (input.substr(pos, 4) === "idiv") {
                  var result9 = "idiv";
                  pos += 4;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"idiv\"");
                  }
                }
                if (result9 !== null) {
                  var result6 = result9;
                } else {
                  if (input.substr(pos, 3) === "mod") {
                    var result8 = "mod";
                    pos += 3;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"mod\"");
                    }
                  }
                  if (result8 !== null) {
                    var result6 = result8;
                  } else {
                    var result6 = null;;
                  };
                };
              };
            }
            if (result6 !== null) {
              var result7 = parse_UnionExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(UnionExpr) {return UnionExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnionExpr() {
        var cacheKey = 'UnionExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IntersectExceptExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 5) === "union") {
            var result9 = "union";
            pos += 5;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"union\"");
            }
          }
          if (result9 !== null) {
            var result6 = result9;
          } else {
            if (input.substr(pos, 1) === "|") {
              var result8 = "|";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;;
            };
          }
          if (result6 !== null) {
            var result7 = parse_IntersectExceptExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 5) === "union") {
              var result9 = "union";
              pos += 5;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"union\"");
              }
            }
            if (result9 !== null) {
              var result6 = result9;
            } else {
              if (input.substr(pos, 1) === "|") {
                var result8 = "|";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;;
              };
            }
            if (result6 !== null) {
              var result7 = parse_IntersectExceptExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(IntersectExceptExpr) {return IntersectExceptExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IntersectExceptExpr() {
        var cacheKey = 'IntersectExceptExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_InstanceofExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 9) === "intersect") {
            var result9 = "intersect";
            pos += 9;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"intersect\"");
            }
          }
          if (result9 !== null) {
            var result6 = result9;
          } else {
            if (input.substr(pos, 6) === "except") {
              var result8 = "except";
              pos += 6;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"except\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;;
            };
          }
          if (result6 !== null) {
            var result7 = parse_InstanceofExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 9) === "intersect") {
              var result9 = "intersect";
              pos += 9;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"intersect\"");
              }
            }
            if (result9 !== null) {
              var result6 = result9;
            } else {
              if (input.substr(pos, 6) === "except") {
                var result8 = "except";
                pos += 6;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"except\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;;
              };
            }
            if (result6 !== null) {
              var result7 = parse_InstanceofExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(InstanceofExpr) {return InstanceofExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_InstanceofExpr() {
        var cacheKey = 'InstanceofExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_TreatExpr();
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 8) === "instance") {
            var result6 = "instance";
            pos += 8;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"instance\"");
            }
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "of") {
              var result7 = "of";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"of\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_SequenceType();
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(TreatExpr) {return TreatExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TreatExpr() {
        var cacheKey = 'TreatExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_CastableExpr();
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 5) === "treat") {
            var result6 = "treat";
            pos += 5;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"treat\"");
            }
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result7 = "as";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_SequenceType();
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(CastableExpr) {return CastableExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CastableExpr() {
        var cacheKey = 'CastableExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_CastExpr();
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 8) === "castable") {
            var result6 = "castable";
            pos += 8;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"castable\"");
            }
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result7 = "as";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_SingleType();
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(CastExpr) {return CastExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CastExpr() {
        var cacheKey = 'CastExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_UnaryExpr();
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 4) === "cast") {
            var result6 = "cast";
            pos += 4;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"cast\"");
            }
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result7 = "as";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_SingleType();
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(UnaryExpr) {return UnaryExpr;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryExpr() {
        var cacheKey = 'UnaryExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        if (input.substr(pos, 1) === "-") {
          var result7 = "-";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result7 !== null) {
          var result5 = result7;
        } else {
          if (input.substr(pos, 1) === "+") {
            var result6 = "+";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result6 !== null) {
            var result5 = result6;
          } else {
            var result5 = null;;
          };
        }
        while (result5 !== null) {
          result3.push(result5);
          if (input.substr(pos, 1) === "-") {
            var result7 = "-";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos, 1) === "+") {
              var result6 = "+";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
        }
        if (result3 !== null) {
          var result4 = parse_ValueExpr();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(UnaryOp, ValueExpr) {return UnaryOp + ValueExpr;})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ValueExpr() {
        var cacheKey = 'ValueExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PathExpr();
        var result2 = result1 !== null
          ? (function(expr) {return expr;})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GeneralComp() {
        var cacheKey = 'GeneralComp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "=") {
          var result6 = "=";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 2) === "!=") {
            var result5 = "!=";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"!=\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 1) === "<") {
              var result4 = "<";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 2) === "<=") {
                var result3 = "<=";
                pos += 2;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<=\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 1) === ">") {
                  var result2 = ">";
                  pos += 1;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 2) === ">=") {
                    var result1 = ">=";
                    pos += 2;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ValueComp() {
        var cacheKey = 'ValueComp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "eq") {
          var result6 = "eq";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"eq\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 2) === "ne") {
            var result5 = "ne";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"ne\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 2) === "lt") {
              var result4 = "lt";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"lt\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 2) === "le") {
                var result3 = "le";
                pos += 2;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"le\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 2) === "gt") {
                  var result2 = "gt";
                  pos += 2;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"gt\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 2) === "ge") {
                    var result1 = "ge";
                    pos += 2;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"ge\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeComp() {
        var cacheKey = 'NodeComp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "is") {
          var result3 = "is";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"is\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "<<") {
            var result2 = "<<";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"<<\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 2) === ">>") {
              var result1 = ">>";
              pos += 2;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\">>\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathExpr() {
        var cacheKey = 'PathExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result6 = parse_LeadingSingleSlash();
        if (result6 !== null) {
          var result8 = parse_RelativePathExpr();
          var result7 = result8 !== null ? result8 : '';
          if (result7 !== null) {
            var result5 = [result6, result7];
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result3 = parse_DoubleSlash();
          if (result3 !== null) {
            var result4 = parse_RelativePathExpr();
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_RelativePathExpr();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LeadingSingleSlash() {
        var cacheKey = 'LeadingSingleSlash@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "/") {
          var result1 = "/";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {return "";})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelativePathExpr() {
        var cacheKey = 'RelativePathExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_StepExpr();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_FurtherStepExpr();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_FurtherStepExpr();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stepExpr, furtherStepExprs) {return stepExpr + furtherStepExprs;})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FurtherStepExpr() {
        var cacheKey = 'FurtherStepExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse_SingleSlash();
        if (result6 !== null) {
          var result3 = result6;
        } else {
          var result5 = parse_DoubleSlash();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_StepExpr();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stepSeparator, stepExpr) {return stepSeparator + stepExpr;})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleSlash() {
        var cacheKey = 'SingleSlash@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "/") {
          var result1 = "/";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {return " > ";})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoubleSlash() {
        var cacheKey = 'DoubleSlash@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result1 = "//";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {return " ";})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StepExpr() {
        var cacheKey = 'StepExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_FilterExpr();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_AxisStep();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(expr) {return expr.join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AxisStep() {
        var cacheKey = 'AxisStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_ReverseStep();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_ForwardStep();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result2 = parse_PredicateList();
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ForwardStep() {
        var cacheKey = 'ForwardStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_ForwardAxis();
        if (result3 !== null) {
          var result4 = parse_NodeTest();
          if (result4 !== null) {
            var result2 = [result3, result4];
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AbbrevForwardStep();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ForwardAxis() {
        var cacheKey = 'ForwardAxis@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos7 = pos;
        if (input.substr(pos, 5) === "child") {
          var result23 = "child";
          pos += 5;
        } else {
          var result23 = null;
          if (reportMatchFailures) {
            matchFailed("\"child\"");
          }
        }
        if (result23 !== null) {
          if (input.substr(pos, 2) === "::") {
            var result24 = "::";
            pos += 2;
          } else {
            var result24 = null;
            if (reportMatchFailures) {
              matchFailed("\"::\"");
            }
          }
          if (result24 !== null) {
            var result22 = [result23, result24];
          } else {
            var result22 = null;
            pos = savedPos7;
          }
        } else {
          var result22 = null;
          pos = savedPos7;
        }
        if (result22 !== null) {
          var result0 = result22;
        } else {
          var savedPos6 = pos;
          if (input.substr(pos, 10) === "descendant") {
            var result20 = "descendant";
            pos += 10;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"descendant\"");
            }
          }
          if (result20 !== null) {
            if (input.substr(pos, 2) === "::") {
              var result21 = "::";
              pos += 2;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"::\"");
              }
            }
            if (result21 !== null) {
              var result19 = [result20, result21];
            } else {
              var result19 = null;
              pos = savedPos6;
            }
          } else {
            var result19 = null;
            pos = savedPos6;
          }
          if (result19 !== null) {
            var result0 = result19;
          } else {
            var savedPos5 = pos;
            if (input.substr(pos, 9) === "attribute") {
              var result17 = "attribute";
              pos += 9;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"attribute\"");
              }
            }
            if (result17 !== null) {
              if (input.substr(pos, 2) === "::") {
                var result18 = "::";
                pos += 2;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"::\"");
                }
              }
              if (result18 !== null) {
                var result16 = [result17, result18];
              } else {
                var result16 = null;
                pos = savedPos5;
              }
            } else {
              var result16 = null;
              pos = savedPos5;
            }
            if (result16 !== null) {
              var result0 = result16;
            } else {
              var savedPos4 = pos;
              if (input.substr(pos, 4) === "self") {
                var result14 = "self";
                pos += 4;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"self\"");
                }
              }
              if (result14 !== null) {
                if (input.substr(pos, 2) === "::") {
                  var result15 = "::";
                  pos += 2;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"::\"");
                  }
                }
                if (result15 !== null) {
                  var result13 = [result14, result15];
                } else {
                  var result13 = null;
                  pos = savedPos4;
                }
              } else {
                var result13 = null;
                pos = savedPos4;
              }
              if (result13 !== null) {
                var result0 = result13;
              } else {
                var savedPos3 = pos;
                if (input.substr(pos, 18) === "descendant-or-self") {
                  var result11 = "descendant-or-self";
                  pos += 18;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"descendant-or-self\"");
                  }
                }
                if (result11 !== null) {
                  if (input.substr(pos, 2) === "::") {
                    var result12 = "::";
                    pos += 2;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"::\"");
                    }
                  }
                  if (result12 !== null) {
                    var result10 = [result11, result12];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  var savedPos2 = pos;
                  if (input.substr(pos, 17) === "following-sibling") {
                    var result8 = "following-sibling";
                    pos += 17;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"following-sibling\"");
                    }
                  }
                  if (result8 !== null) {
                    if (input.substr(pos, 2) === "::") {
                      var result9 = "::";
                      pos += 2;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"::\"");
                      }
                    }
                    if (result9 !== null) {
                      var result7 = [result8, result9];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    var savedPos1 = pos;
                    if (input.substr(pos, 9) === "following") {
                      var result5 = "following";
                      pos += 9;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"following\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "::") {
                        var result6 = "::";
                        pos += 2;
                      } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"::\"");
                        }
                      }
                      if (result6 !== null) {
                        var result4 = [result5, result6];
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                    if (result4 !== null) {
                      var result0 = result4;
                    } else {
                      var savedPos0 = pos;
                      if (input.substr(pos, 9) === "namespace") {
                        var result2 = "namespace";
                        pos += 9;
                      } else {
                        var result2 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"namespace\"");
                        }
                      }
                      if (result2 !== null) {
                        if (input.substr(pos, 2) === "::") {
                          var result3 = "::";
                          pos += 2;
                        } else {
                          var result3 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"::\"");
                          }
                        }
                        if (result3 !== null) {
                          var result1 = [result2, result3];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbrevForwardStep() {
        var cacheKey = 'AbbrevForwardStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result3 = "@";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          var result2 = parse_NodeTest();
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReverseStep() {
        var cacheKey = 'ReverseStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_ReverseAxis();
        if (result3 !== null) {
          var result4 = parse_NodeTest();
          if (result4 !== null) {
            var result2 = [result3, result4];
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AbbrevReverseStep();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReverseAxis() {
        var cacheKey = 'ReverseAxis@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        if (input.substr(pos, 6) === "parent") {
          var result14 = "parent";
          pos += 6;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"parent\"");
          }
        }
        if (result14 !== null) {
          if (input.substr(pos, 2) === "::") {
            var result15 = "::";
            pos += 2;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"::\"");
            }
          }
          if (result15 !== null) {
            var result13 = [result14, result15];
          } else {
            var result13 = null;
            pos = savedPos4;
          }
        } else {
          var result13 = null;
          pos = savedPos4;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos3 = pos;
          if (input.substr(pos, 8) === "ancestor") {
            var result11 = "ancestor";
            pos += 8;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"ancestor\"");
            }
          }
          if (result11 !== null) {
            if (input.substr(pos, 2) === "::") {
              var result12 = "::";
              pos += 2;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"::\"");
              }
            }
            if (result12 !== null) {
              var result10 = [result11, result12];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 17) === "preceding-sibling") {
              var result8 = "preceding-sibling";
              pos += 17;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"preceding-sibling\"");
              }
            }
            if (result8 !== null) {
              if (input.substr(pos, 2) === "::") {
                var result9 = "::";
                pos += 2;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"::\"");
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 9) === "preceding") {
                var result5 = "preceding";
                pos += 9;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"preceding\"");
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 2) === "::") {
                  var result6 = "::";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"::\"");
                  }
                }
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 16) === "ancestor-or-self") {
                  var result2 = "ancestor-or-self";
                  pos += 16;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"ancestor-or-self\"");
                  }
                }
                if (result2 !== null) {
                  if (input.substr(pos, 2) === "::") {
                    var result3 = "::";
                    pos += 2;
                  } else {
                    var result3 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"::\"");
                    }
                  }
                  if (result3 !== null) {
                    var result1 = [result2, result3];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbrevReverseStep() {
        var cacheKey = 'AbbrevReverseStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "..") {
          var result0 = "..";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"..\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeTest() {
        var cacheKey = 'NodeTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_KindTest();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_NameTest();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameTest() {
        var cacheKey = 'NameTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_QName();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Wildcard();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Wildcard() {
        var cacheKey = 'Wildcard@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "*") {
          var result9 = "*";
          pos += 1;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos1 = pos;
          var result6 = parse_NCName();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result7 = ":";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result7 !== null) {
              if (input.substr(pos, 1) === "*") {
                var result8 = "*";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "*") {
              var result2 = "*";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result2 !== null) {
              if (input.substr(pos, 1) === ":") {
                var result3 = ":";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
              if (result3 !== null) {
                var result4 = parse_NCName();
                if (result4 !== null) {
                  var result1 = [result2, result3, result4];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FilterExpr() {
        var cacheKey = 'FilterExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PrimaryExpr();
        if (result3 !== null) {
          var result4 = parse_PredicateList();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr) {return expr;})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PredicateList() {
        var cacheKey = 'PredicateList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_Predicate();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_Predicate();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Predicate() {
        var cacheKey = 'Predicate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse_Expr();
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrimaryExpr() {
        var cacheKey = 'PrimaryExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result10 = parse_Literal();
        if (result10 !== null) {
          var result1 = result10;
        } else {
          var savedPos1 = pos;
          var result7 = parse_VarRef();
          if (result7 !== null) {
            var result9 = parse_EngineFunctionCall();
            var result8 = result9 !== null ? result9 : '';
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          if (result6 !== null) {
            var result1 = result6;
          } else {
            var result5 = parse_ParenthesizedExpr();
            if (result5 !== null) {
              var result1 = result5;
            } else {
              var result4 = parse_ContextItemExpr();
              if (result4 !== null) {
                var result1 = result4;
              } else {
                var result3 = parse_FunctionCall();
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;;
                };
              };
            };
          };
        }
        var result2 = result1 !== null
          ? (function(primaryExpr) {return primaryExpr.join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Literal() {
        var cacheKey = 'Literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_NumericLiteral();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_StringLiteral();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteral() {
        var cacheKey = 'NumericLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_Digits();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DecimalLiteral();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_DoubleLiteral();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarRef() {
        var cacheKey = 'VarRef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "$") {
          var result3 = "$";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_QName();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "~") {
              var result5 = "~";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"~\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(varName) {return "$x.variables['" + varName + "']";})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ParenthesizedExpr() {
        var cacheKey = 'ParenthesizedExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result1 = "(";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result1 !== null) {
          var result4 = parse_Expr();
          var result2 = result4 !== null ? result4 : '';
          if (result2 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result3 = ")";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ContextItemExpr() {
        var cacheKey = 'ContextItemExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ".") {
          var result0 = ".";
          pos += 1;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionCall() {
        var cacheKey = 'FunctionCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_FunctionName();
        if (result3 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result8 = parse_ExprSingle();
            if (result8 !== null) {
              var result9 = [];
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result11 = ",";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result11 !== null) {
                if (input.substr(pos).match(/^[s]/) !== null) {
                  var result12 = input.charAt(pos);
                  pos++;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("[s]");
                  }
                }
                if (result12 !== null) {
                  var result13 = parse_ExprSingle();
                  if (result13 !== null) {
                    var result10 = [result11, result12, result13];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
              while (result10 !== null) {
                result9.push(result10);
                var savedPos3 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result11 = ",";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result11 !== null) {
                  if (input.substr(pos).match(/^[s]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[s]");
                    }
                  }
                  if (result12 !== null) {
                    var result13 = parse_ExprSingle();
                    if (result13 !== null) {
                      var result10 = [result11, result12, result13];
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(args) {
          	var result = "";
          console.log(arguments.callee);
          //console.log("arguments: " + arguments[0].join(""));
          	for (var i = 0, il = args.length; i < il; i++) {
                          //console.log(args[i]);
          		result += args[i];
          	}
          	return result;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EngineFunctionCall() {
        var cacheKey = 'EngineFunctionCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 12) === "_simpathPath") {
          var result8 = "_simpathPath";
          pos += 12;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"_simpathPath\"");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos, 13) === "simpathFilter") {
            var result7 = "simpathFilter";
            pos += 13;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"simpathFilter\"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_StringLiteral();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(engineFunctionName, args) {
          return "." + engineFunctionName + "(\"" + args + "\")";
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionName() {
        var cacheKey = 'FunctionName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "concat") {
          var result4 = "concat";
          pos += 6;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"concat\"");
          }
        }
        if (result4 !== null) {
          var result1 = result4;
        } else {
          if (input.substr(pos, 16) === "current-dateTime") {
            var result3 = "current-dateTime";
            pos += 16;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"current-dateTime\"");
            }
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(funcName) {return funcName;})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleType() {
        var cacheKey = 'SingleType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_QName();
        if (result1 !== null) {
          if (input.substr(pos, 1) === "?") {
            var result3 = "?";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"?\"");
            }
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SequenceType() {
        var cacheKey = 'SequenceType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 14) === "empty-sequence") {
          var result6 = "empty-sequence";
          pos += 14;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"empty-sequence\"");
          }
        }
        if (result6 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result7 = "(";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result7 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result8 = ")";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_ItemType();
          if (result2 !== null) {
            var result4 = parse_OccurrenceIndicator();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OccurrenceIndicator() {
        var cacheKey = 'OccurrenceIndicator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "?") {
          var result3 = "?";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"?\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "*") {
            var result2 = "*";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 1) === "+") {
              var result1 = "+";
              pos += 1;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ItemType() {
        var cacheKey = 'ItemType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_KindTest();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 4) === "item") {
            var result3 = "item";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"item\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result5 = ")";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_QName();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_KindTest() {
        var cacheKey = 'KindTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_DocumentTest();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_ElementTest();
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_AttributeTest();
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var result6 = parse_SchemaElementTest();
              if (result6 !== null) {
                var result0 = result6;
              } else {
                var result5 = parse_SchemaAttributeTest();
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var result4 = parse_PITest();
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    var result3 = parse_CommentTest();
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      var result2 = parse_TextTest();
                      if (result2 !== null) {
                        var result0 = result2;
                      } else {
                        var result1 = parse_AnyKindTest();
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AnyKindTest() {
        var cacheKey = 'AnyKindTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "node") {
          var result1 = "node";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"node\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result3 = ")";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DocumentTest() {
        var cacheKey = 'DocumentTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 13) === "document-node") {
          var result1 = "document-node";
          pos += 13;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"document-node\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result7 = parse_ElementTest();
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_SchemaElementTest();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TextTest() {
        var cacheKey = 'TextTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "text") {
          var result1 = "text";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"text\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result3 = ")";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CommentTest() {
        var cacheKey = 'CommentTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "comment") {
          var result1 = "comment";
          pos += 7;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"comment\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result3 = ")";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PITest() {
        var cacheKey = 'PITest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 22) === "processing-instruction") {
          var result1 = "processing-instruction";
          pos += 22;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"processing-instruction\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result7 = parse_NCName();
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_StringLiteral();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AttributeTest() {
        var cacheKey = 'AttributeTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 9) === "attribute") {
          var result1 = "attribute";
          pos += 9;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"attribute\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_AttribNameOrWildcard();
            if (result6 !== null) {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_QName();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AttribNameOrWildcard() {
        var cacheKey = 'AttribNameOrWildcard@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_QName();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "*") {
            var result1 = "*";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SchemaAttributeTest() {
        var cacheKey = 'SchemaAttributeTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 16) === "schema-attribute") {
          var result1 = "schema-attribute";
          pos += 16;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"schema-attribute\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_QName();
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ElementTest() {
        var cacheKey = 'ElementTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "element") {
          var result1 = "element";
          pos += 7;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"element\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_ElementNameOrWildcard();
            if (result6 !== null) {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_QName();
                if (result10 !== null) {
                  if (input.substr(pos, 1) === "?") {
                    var result12 = "?";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"?\"");
                    }
                  }
                  var result11 = result12 !== null ? result12 : '';
                  if (result11 !== null) {
                    var result8 = [result9, result10, result11];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ElementNameOrWildcard() {
        var cacheKey = 'ElementNameOrWildcard@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_QName();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "*") {
            var result1 = "*";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SchemaElementTest() {
        var cacheKey = 'SchemaElementTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 14) === "schema-element") {
          var result1 = "schema-element";
          pos += 14;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"schema-element\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_QName();
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QName() {
        var cacheKey = 'QName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_PrefixedName();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_NCName();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixedName() {
        var cacheKey = 'PrefixedName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NCName();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_NCName();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr) {return expr[1].join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NCName() {
        var cacheKey = 'NCName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NameStartChar();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_NameChar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_NameChar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(NameStartChar, NameChar) {return NameStartChar + NameChar.join("");})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameStartChar() {
        var cacheKey = 'NameStartChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[:_A-Za-zu00C0-u00D6u00D8-u00F6u00F8-u02FFu0370-u037Du037F-u1FFFu200C-u200Du2070-u218Fu2C00-u2FEFu3001-uD7FFuF900-uFDCFuFDF0-uFFFDu10000-uEFFFF]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[:_A-Za-zu00C0-u00D6u00D8-u00F6u00F8-u02FFu0370-u037Du037F-u1FFFu200C-u200Du2070-u218Fu2C00-u2FEFu3001-uD7FFuF900-uFDCFuFDF0-uFFFDu10000-uEFFFF]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameChar() {
        var cacheKey = 'NameChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_NameStartChar();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos).match(/^[\-.0-9]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-.0-9]");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos).match(/^[u00B7]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[u00B7]");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos).match(/^[u0300-u036Fu203F-u2040]/) !== null) {
                var result1 = input.charAt(pos);
                pos++;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("[u0300-u036Fu203F-u2040]");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StringLiteral() {
        var cacheKey = 'StringLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result11 = "\"";
          pos += 1;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result11 !== null) {
          var result12 = [];
          if (input.substr(pos, 2) === "\"\"") {
            var result16 = "\"\"";
            pos += 2;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\"\\\"\"");
            }
          }
          if (result16 !== null) {
            var result14 = result16;
          } else {
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result15 = input.charAt(pos);
              pos++;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
            if (result15 !== null) {
              var result14 = result15;
            } else {
              var result14 = null;;
            };
          }
          while (result14 !== null) {
            result12.push(result14);
            if (input.substr(pos, 2) === "\"\"") {
              var result16 = "\"\"";
              pos += 2;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\\\"\"");
              }
            }
            if (result16 !== null) {
              var result14 = result16;
            } else {
              if (input.substr(pos).match(/^[^"]/) !== null) {
                var result15 = input.charAt(pos);
                pos++;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\"]");
                }
              }
              if (result15 !== null) {
                var result14 = result15;
              } else {
                var result14 = null;;
              };
            }
          }
          if (result12 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result13 = "\"";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result13 !== null) {
              var result10 = [result11, result12, result13];
            } else {
              var result10 = null;
              pos = savedPos2;
            }
          } else {
            var result10 = null;
            pos = savedPos2;
          }
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "'") {
            var result4 = "'";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos, 2) === "''") {
              var result9 = "''";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"''\"");
              }
            }
            if (result9 !== null) {
              var result7 = result9;
            } else {
              if (input.substr(pos).match(/^[^']/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[^']");
                }
              }
              if (result8 !== null) {
                var result7 = result8;
              } else {
                var result7 = null;;
              };
            }
            while (result7 !== null) {
              result5.push(result7);
              if (input.substr(pos, 2) === "''") {
                var result9 = "''";
                pos += 2;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"''\"");
                }
              }
              if (result9 !== null) {
                var result7 = result9;
              } else {
                if (input.substr(pos).match(/^[^']/) !== null) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^']");
                  }
                }
                if (result8 !== null) {
                  var result7 = result8;
                } else {
                  var result7 = null;;
                };
              }
            }
            if (result5 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result6 = "'";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result6 !== null) {
                var result3 = [result4, result5, result6];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(expr) {return expr[1].join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DecimalLiteral() {
        var cacheKey = 'DecimalLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ".") {
          var result7 = ".";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result7 !== null) {
          var result8 = parse_Digits();
          if (result8 !== null) {
            var result6 = [result7, result8];
          } else {
            var result6 = null;
            pos = savedPos1;
          }
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var result2 = parse_Digits();
          if (result2 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result3 = ".";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result3 !== null) {
              var result4 = [];
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoubleLiteral() {
        var cacheKey = 'DoubleLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === ".") {
          var result14 = ".";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result14 !== null) {
          var result15 = parse_Digits();
          if (result15 !== null) {
            var result13 = [result14, result15];
          } else {
            var result13 = null;
            pos = savedPos3;
          }
        } else {
          var result13 = null;
          pos = savedPos3;
        }
        if (result13 !== null) {
          var result1 = result13;
        } else {
          var savedPos1 = pos;
          var result7 = parse_Digits();
          if (result7 !== null) {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result10 = ".";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result10 !== null) {
              var result11 = [];
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result12 = input.charAt(pos);
                pos++;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              while (result12 !== null) {
                result11.push(result12);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result12 = input.charAt(pos);
                  pos++;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result11 !== null) {
                var result9 = [result10, result11];
              } else {
                var result9 = null;
                pos = savedPos2;
              }
            } else {
              var result9 = null;
              pos = savedPos2;
            }
            var result8 = result9 !== null ? result9 : '';
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          if (result6 !== null) {
            var result1 = result6;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[eE]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("[eE]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[+\-]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[+\\-]");
              }
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              var result4 = parse_Digits();
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Digits() {
        var cacheKey = 'Digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
